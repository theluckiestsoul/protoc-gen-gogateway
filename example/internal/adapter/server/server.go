// Code generated by Go Gateway. DO NOT EDIT.

package server

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"time"
	hello "github.com/theluckiestsoul/protoc-gen-gogateway/example/internal/adapter/hello"
	echo "github.com/labstack/echo/v4"
)

type unimplementedMiddleware struct{}

func (u unimplementedMiddleware) getMiddlewares() []echo.MiddlewareFunc {
	return []echo.MiddlewareFunc{}
}

type middleware struct {
	unimplementedMiddleware
}

func RunServer(port string) {
	e := echo.New()
	g := e.Group("")
	m := middleware{}
	g.Use(m.getMiddlewares()...)
	e.GET("/", welcome)
	e.GET("/healthcheck", healthCheck)
	hello.RegisterHelloServiceHandler(g)

	e.Logger.Info("server started on port ", port)
	// Start server
	go func() {
		if err := e.Start(port); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server with a timeout of 10 seconds.
	// Use a buffered channel to avoid missing signals as recommended for signal.Notify
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, os.Kill)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}

func welcome(c echo.Context) error {
	return c.String(http.StatusOK, "Go Gateway")
}
func healthCheck(c echo.Context) error {
	return c.JSON(http.StatusOK, "OK")
}
